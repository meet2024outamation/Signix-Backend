// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Signix.IAM.Entities;
using Microsoft.EntityFrameworkCore;
using Signix.IAM.Entities.dbo;

namespace Signix.IAM.Context;

public partial class IAMDbContext : DbContext
{
    public IAMDbContext(DbContextOptions<IAMDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<ClientStatus> ClientStatuses { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolePermission> RolePermissions { get; set; }

    public virtual DbSet<RoleStatus> RoleStatuses { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserClient> UserClients { get; set; }

    public virtual DbSet<UserClientModule> UserClientModules { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Client>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("Clients_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));

            entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("sysdatetimeoffset()");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.HasOne(d => d.Status).WithMany(p => p.Clients).HasConstraintName("FK_Clients_StatusId_ClientStatuses_Id");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.Property(e => e.IsServicePrincipal).HasDefaultValue(false);

            entity.HasOne(d => d.Module).WithMany(p => p.Permissions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Permissions_ModuleId");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("Roles_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));

            entity.Property(e => e.IsServicePrincipal).HasDefaultValue(false);

            entity.HasOne(d => d.Client).WithMany(p => p.Roles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Roles_ClientId_Clients_Id");

            entity.HasOne(d => d.Status).WithMany(p => p.Roles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Roles_StatusId_RoleStatuses_Id");
        });

        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("RolePermissions_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("Users_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));

            entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("sysdatetimeoffset()");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsServicePrincipal).HasDefaultValue(false);
            entity.Property(e => e.UniqueId).HasDefaultValueSql("[dbo].[fn_GetHexUniqueId](NEXT VALUE FOR [dbo].[seq_UniqueId])");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.InverseCreatedBy).HasConstraintName("FK_Users_CreatedById_Users_Id");

            entity.HasOne(d => d.CurrentClient).WithMany(p => p.Users).HasConstraintName("FK_Users_CurrentClientId_Clients_Id");

            entity.HasOne(d => d.ModifiedBy).WithMany(p => p.InverseModifiedBy).HasConstraintName("FK_Users_ModifiedById_Users_Id");
        });

        modelBuilder.Entity<UserClient>(entity =>
        {
            entity.HasOne(d => d.Client).WithMany(p => p.UserClients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserClients_ClientId_Clients_Id");

            entity.HasOne(d => d.User).WithMany(p => p.UserClients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserClients_UserId_Users_Id");
        });

        modelBuilder.Entity<UserClientModule>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("UserClientModules_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));

            entity.HasOne(d => d.Client).WithMany(p => p.UserClientModules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserClientModules_ClientId_Clients_Id");

            entity.HasOne(d => d.Module).WithMany(p => p.UserClientModules).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.UserClientModules).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<UserDepartment>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("UserDepartment_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));

            entity.HasOne(d => d.Department).WithMany(p => p.UserDepartments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserDepartment_Departments_DepartmentId");

            entity.HasOne(d => d.User).WithMany(p => p.UserDepartments).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("UserRoles_History", "dbo");
                        ttb
                            .HasPeriodStart("PeriodStart")
                            .HasColumnName("PeriodStart");
                        ttb
                            .HasPeriodEnd("PeriodEnd")
                            .HasColumnName("PeriodEnd");
                    }));
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}