// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Signix.Entities.Context;

#nullable disable

namespace Signix.Entities.Migrations
{
    [DbContext(typeof(SignixDbContext))]
    partial class SignixDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Signix.Entities.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("azure_client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("jsonb")
                        .HasColumnName("client_secret");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_designations");

                    b.ToTable("designations", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocTags")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("doc_tags");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("SigningRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("signing_room_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("DocumentStatusId")
                        .HasDatabaseName("ix_documents_document_status_id");

                    b.HasIndex("SigningRoomId")
                        .HasDatabaseName("ix_documents_signing_room_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_document_statuses");

                    b.ToTable("document_statuses", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.SignLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("pk_sign_logs");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_sign_logs_document_id");

                    b.ToTable("sign_logs", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.Signer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DesignationId")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("designation_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("SignatureData")
                        .HasColumnType("text")
                        .HasColumnName("signature_data");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sined_at");

                    b.Property<int>("SigningRoomId")
                        .HasColumnType("integer")
                        .HasColumnName("signing_room_id");

                    b.HasKey("Id")
                        .HasName("pk_signers");

                    b.HasIndex("DesignationId")
                        .HasDatabaseName("ix_signers_designation_id");

                    b.HasIndex("SigningRoomId")
                        .HasDatabaseName("ix_signers_signing_room_id");

                    b.HasIndex("SigningRoomId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_signers_signing_room_id_email");

                    b.ToTable("signers", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.SigningRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_data");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("NotaryId")
                        .HasColumnType("integer")
                        .HasColumnName("notary_id");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_path");

                    b.Property<string>("SignTags")
                        .HasColumnType("jsonb")
                        .HasColumnName("sign_tags");

                    b.Property<string>("SignedPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signed_path");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.HasKey("Id")
                        .HasName("pk_signing_rooms");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_signing_rooms_client_id");

                    b.HasIndex("NotaryId")
                        .HasDatabaseName("ix_signing_rooms_notary_id");

                    b.ToTable("signing_rooms", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_data");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Signix.Entities.Entities.Document", b =>
                {
                    b.HasOne("Signix.Entities.Entities.DocumentStatus", "DocumentStatus")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_documents_document_statuses_document_status_id");

                    b.HasOne("Signix.Entities.Entities.SigningRoom", "SigningRoom")
                        .WithMany("Documents")
                        .HasForeignKey("SigningRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_signing_rooms_signing_room_id");

                    b.Navigation("DocumentStatus");

                    b.Navigation("SigningRoom");
                });

            modelBuilder.Entity("Signix.Entities.Entities.SignLog", b =>
                {
                    b.HasOne("Signix.Entities.Entities.Document", "Document")
                        .WithMany("SignLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sign_logs_documents_document_id");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Signix.Entities.Entities.Signer", b =>
                {
                    b.HasOne("Signix.Entities.Entities.Designation", "Designation")
                        .WithMany("Signers")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_signers_designations_designation_id");

                    b.HasOne("Signix.Entities.Entities.SigningRoom", "SigningRoom")
                        .WithMany("Signers")
                        .HasForeignKey("SigningRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signers_signing_rooms_signing_room_id");

                    b.Navigation("Designation");

                    b.Navigation("SigningRoom");
                });

            modelBuilder.Entity("Signix.Entities.Entities.SigningRoom", b =>
                {
                    b.HasOne("Signix.Entities.Entities.Client", "Client")
                        .WithMany("SigningRooms")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_signing_rooms_clients_client_id");

                    b.HasOne("Signix.Entities.Entities.User", "Notary")
                        .WithMany("SigningRooms")
                        .HasForeignKey("NotaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_signing_rooms_users_notary_id");

                    b.Navigation("Client");

                    b.Navigation("Notary");
                });

            modelBuilder.Entity("Signix.Entities.Entities.Client", b =>
                {
                    b.Navigation("SigningRooms");
                });

            modelBuilder.Entity("Signix.Entities.Entities.Designation", b =>
                {
                    b.Navigation("Signers");
                });

            modelBuilder.Entity("Signix.Entities.Entities.Document", b =>
                {
                    b.Navigation("SignLogs");
                });

            modelBuilder.Entity("Signix.Entities.Entities.DocumentStatus", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Signix.Entities.Entities.SigningRoom", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Signers");
                });

            modelBuilder.Entity("Signix.Entities.Entities.User", b =>
                {
                    b.Navigation("SigningRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
